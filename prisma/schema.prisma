generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id      String  @id @default(cuid())
  email   String  @unique
  name    String?
  phone   String
  clerkId String
}

model UserResume {
  id          String   @id @default(uuid())
  clerkId     String
  resumeTitle String
  firstName   String?
  lastName    String?
  jobTitle    String?
  address     String?
  phone       String?
  email       String?
  userEmail   String?
  userName    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Job {
  id        String   @id @default(uuid())
  clerkId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  position  String
  company   String
  location  String
  mode      Mode
  status    String
}

enum Mode {
  FULLTIME
  PARTTIME
  INTERNSHIP
}

model Resume {
  id             String          @id @default(uuid())
  userId         String          // ✅ ONE place to hold the user ID
  title          String
  createdAt      DateTime        @default(now())

  personalInfo   PersonalInfo?
  experiences    Experience[]
  education      Education[]
  skills         Skill[]
  certifications Certification[]   // ✅ New
  achievements   Achievement[]     // ✅ New
  summary        Summary?
}

model PersonalInfo {
  id         String   @id @default(uuid())
  resumeId   String   @unique
  resume     Resume   @relation(fields: [resumeId], references: [id])
  firstName  String
  lastName   String
  email      String
  phone      String
  address    String
  website    String
  department String
  jobTitle   String
}

model Experience {
  id             String   @id @default(cuid())
  company        String
  resume           Resume   @relation(fields: [resumeId], references: [id])
  role           String
  startDate      DateTime?
  endDate        DateTime?
  duties         String?
  responsibilities String?
  accomplishments String?
  clearance      String?
  grade          String?
  status         String?
  time           String?
  resumeId       String // optional
}



model Education {
  id         String   @id @default(uuid())
  resumeId   String
  resume     Resume   @relation(fields: [resumeId], references: [id])
  school     String
  degree     String
  field      String
  startYear  Int
  endYear    Int
}

model Skill {
  id        String   @id @default(uuid())
  resumeId  String
  resume    Resume   @relation(fields: [resumeId], references: [id])
  name      String
  level     String
}

model Summary {
  id        String   @id @default(uuid())
  resumeId  String   @unique
  resume    Resume   @relation(fields: [resumeId], references: [id])
  text      String
}

model Certification {
  id           String   @id @default(uuid())
  resumeId     String
  resume       Resume   @relation(fields: [resumeId], references: [id])
  title        String
  issuer       String
  issueDate    DateTime
  expirationDate DateTime?
  credentialId String?
  credentialUrl String?
}

model Achievement {
  id         String   @id @default(uuid())
  resumeId   String
  resume     Resume   @relation(fields: [resumeId], references: [id])
  title      String
  description String
  date       DateTime
}

